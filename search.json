[{"path":"https://ketchbrookanalytics.github.io/migrate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Ketchbrook Analytics LLC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/articles/migrate.html","id":"using-migrate","dir":"Articles","previous_headings":"","what":"Using {migrate}","title":"migrate","text":"package intended serve set tools help convert credit risk data two timepoints traditional state transition matrices. higher level, {migrate} intended help analyst understand risk moved credit portfolio time interval.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/articles/migrate.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"migrate","text":"One difficult aspects making state migration matrix R (Python, matter) fact output doesn’t satisfy structure traditional data frame object. Rather, output needs matrix, data structure R support. past, difficulty converting matrix something visual-friendly. recently, however, tools like kableExtra gt packages allow us present visually appealing output extends structure data frame. Using matrix-style output {migrate}’s functions visual formatting package two mentioned hopefully help analysts streamline presentation credit portfolio’s state migration matrices audience.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/articles/migrate.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"migrate","text":"haven’t done already, first install {migrate} instructions README section. First, load package using library() package built-mock dataset, can loaded environment like : Note important feature mock_credit dataset exactly two (2) unique values date column variable; time argument passed migrate() two (2) unique values, function throw error. summarize migration within data, use migrate() function create state transition matrix, use build_matrix() function , one shot, use |>","code":"library(migrate) data(\"mock_credit\")  head(mock_credit[order(mock_credit$customer_id), ])   # sort by 'customer_id' unique(mock_credit$date) #> [1] \"2020-06-30\" \"2020-09-30\" migrated_df <- migrate(   data = mock_credit,   id = customer_id,   time = date,   state = risk_rating, ) #> ℹ Migrating from 2020-06-30 to 2020-09-30 head(migrated_df) #> # A tibble: 6 × 3 #>   risk_rating_start risk_rating_end   prop #>   <ord>             <ord>            <dbl> #> 1 AAA               AAA             0.774  #> 2 AAA               AA              0.194  #> 3 AAA               A               0.0323 #> 4 AAA               BBB             0      #> 5 AAA               BB              0      #> 6 AAA               B               0 build_matrix(migrated_df) #> ℹ Using `risk_rating_start` as the 'state_start' column variable #> ℹ Using `risk_rating_end` as the 'state_end' column variable #> ℹ Using `prop` as the 'metric' column variable #>             AAA         AA          A        BBB         BB          B        CCC #> AAA 0.774193548 0.19354839 0.03225806 0.00000000 0.00000000 0.00000000 0.00000000 #> AA  0.101123596 0.66292135 0.15730337 0.07865169 0.00000000 0.00000000 0.00000000 #> A   0.008333333 0.06666667 0.72500000 0.16666667 0.03333333 0.00000000 0.00000000 #> BBB 0.000000000 0.00000000 0.11363636 0.68181818 0.14772727 0.05681818 0.00000000 #> BB  0.000000000 0.00000000 0.00000000 0.11392405 0.63291139 0.16455696 0.08860759 #> B   0.000000000 0.00000000 0.00000000 0.01388889 0.09722222 0.62500000 0.26388889 #> CCC 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.14285714 0.85714286 mock_credit |>   migrate(     id = customer_id,     time = date,     state = risk_rating,     metric = principal_balance,     percent = FALSE,     verbose = FALSE   ) |>   build_matrix(     state_start = risk_rating_start,     state_end = risk_rating_end,     metric = principal_balance   ) #>          AAA       AA        A      BBB       BB        B      CCC #> AAA 29042000  6575000    20000        0        0        0        0 #> AA   6445000 58095000 13045000 14467000        0        0        0 #> A     804000  7898000 85330000 21015000  5829000        0        0 #> BBB        0        0 12461000 65315000 13911000  8140000        0 #> BB         0        0        0 11374000 45986000 14057000  5723000 #> B          0        0        0   413000  6700000 47402000 17132000 #> CCC        0        0        0        0        0  2094000 14843000"},{"path":"https://ketchbrookanalytics.github.io/migrate/articles/migrate.html","id":"handle-ids-with-observations-at-a-single-timepoint","dir":"Articles","previous_headings":"","what":"Handle IDs with observations at a single timepoint","title":"migrate","text":"following code creates dataframe features 500 customers following characteristics: 470 customers value timepoints 20 customers value first timepoint 10 customers value second timepoint Check new dataframe information 500 customers: default, migrate() drops observations belong IDs found single timepoint. migrate() informs behavior warning: Notice 470 customers migrated: can use migrate()’s fill_state argument ensure information lost migration process. filler state value (e.g., character string “Rating” “NR”) assigned fill_state, IDs single timepoint removed rather migrated filler state. verbose = TRUE message provide additional information IDs missing timepoints: Check 500 customers migrated: far using count metric easily determine amount customers migrated scenario. following code provides example migration leverages principal_balance metric:","code":"mock_credit_with_missing <- mock_credit |>   # Remove the value at the first timepoint for 10 customers   dplyr::slice(-(1:10)) |>   # Remove the value at the last timepoint for 20 customers   dplyr::slice(-((dplyr::n() - 19):dplyr::n())) # Number of unique customer_id values in mock_credit_with_missing dplyr::n_distinct(mock_credit_with_missing$customer_id) #> [1] 500 migrated_data_without_fill_state <- mock_credit_with_missing |>   migrate(     id = customer_id,     time = date,     state = risk_rating,     percent = FALSE,     verbose = FALSE   ) #> Warning: ! Removed 30 observations due to missingness or IDs only existing at one `time` value migrated_data_without_fill_state |>   dplyr::pull(count) |>   sum() #> [1] 470 migrated_data_with_fill_state <- mock_credit_with_missing |>   migrate(     id = customer_id,     time = date,     state = risk_rating,     fill_state = \"No Rating\",     percent = FALSE,     verbose = TRUE   ) #> ℹ Migrating from 2020-06-30 to 2020-09-30 #> ℹ 30 IDs have a missing timepoint: #>   • Migrating 20 IDs with missing end timepoint to new class 'No Rating' #>   • Migrating 10 IDs with missing start timepoint from new class 'No Rating' migrated_data_with_fill_state |>   dplyr::pull(count) |>   sum() #> [1] 500 mock_credit_with_missing |>   migrate(     id = customer_id,     time = date,     state = risk_rating,     metric = principal_balance,     fill_state = \"No Rating\",     percent = FALSE,     verbose = FALSE   ) |>   build_matrix(     state_start = risk_rating_start,     state_end = risk_rating_end,     metric = principal_balance   ) #>                AAA       AA        A      BBB       BB        B      CCC No Rating #> AAA       27403000  4301000    20000        0        0        0        0   2274000 #> AA         6445000 56333000 11642000 14467000        0        0        0   1762000 #> A           804000  7682000 82044000 19823000  5829000        0        0   3779000 #> BBB              0        0 12461000 62071000 11480000  8140000        0   4275000 #> BB               0        0        0 10930000 44487000 11838000  5723000   1995000 #> B                0        0        0        0  6700000 46412000 14977000   3210000 #> CCC              0        0        0        0        0  2094000 14447000         0 #> No Rating        0        0        0        0        0        0        0         0"},{"path":"https://ketchbrookanalytics.github.io/migrate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Thomas. Author, maintainer. Brad Lindblad. Contributor. Ivan Millanes. Contributor.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thomas M (2024). migrate: Create Credit State Migration (Transition) Matrices. R package version 0.5.0, https://ketchbrookanalytics.github.io/migrate/, https://github.com/ketchbrookanalytics/migrate.","code":"@Manual{,   title = {migrate: Create Credit State Migration (Transition) Matrices},   author = {Michael Thomas},   year = {2024},   note = {R package version 0.5.0, https://ketchbrookanalytics.github.io/migrate/},   url = {https://github.com/ketchbrookanalytics/migrate}, }"},{"path":"https://ketchbrookanalytics.github.io/migrate/index.html","id":"migrate-","dir":"","previous_headings":"","what":"Create Credit State Migration (Transition) Matrices","title":"Create Credit State Migration (Transition) Matrices","text":"goal {migrate} provide users easy set tools building state transition matrices.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/index.html","id":"methodology","dir":"","previous_headings":"","what":"Methodology","title":"Create Credit State Migration (Transition) Matrices","text":"{migrate} provides easy way calculate absolute percentage migration within credit portfolio. image shows typical credit migration matrix using absolute approach; cell grid represents total balance portfolio 2020-06-30 started Risk Rating represented left-hand vertical axis ended (2020-09-30) Risk Rating represented upper horizontal axis matrix. example, $6.58M moved Risk Rating AAA 2020-06-30 Risk Rating AA 2020-09-30. , absolute, migration example typically reporting function, percentage (probabilistic) methodology often statistical modeling exercise, often used credit portfolio risk management. Currently, package supports simple “cohort” methodology. estimates probability moving state state j single time step, echoing Markov process. can visualize matrix, credit portfolio N unique, ordinal states:","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/index.html","id":"future-plans-for-migrate","dir":"","previous_headings":"Methodology","what":"Future Plans for {migrate}","title":"Create Credit State Migration (Transition) Matrices","text":"Future development plans package include building functionality complex duration/hazard methodology, including time-homogeneous non-homogeneous implementations.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Credit State Migration (Transition) Matrices","text":"can install released version {migrate} CRAN : development version GitHub :","code":"install.packages(\"migrate\") # install.packages(\"devtools\") devtools::install_github(\"ketchbrookanalytics/migrate\")"},{"path":"https://ketchbrookanalytics.github.io/migrate/index.html","id":"practical-usage","dir":"","previous_headings":"","what":"Practical Usage","title":"Create Credit State Migration (Transition) Matrices","text":"{migrate} currently handles transitions exactly two (2) timepoints. hood, migrate() finds earliest & latest dates given time variable, filters observations time value match two dates. writing SQL query get data used migrate(), query likely look something like : default, migrate() drops observations belong IDs found single timepoint. However, users can define filler state IDs single timepoint removed rather migrated filler state. allows flexible handling data, ensuring information lost migration process. Check Handle IDs observations single timepoint information.","code":"# -- Get the *State* risk status and *Balance* dollar amount for each ID, at two distinct dates  # SELECT ID, Date, State, Balance # FROM my_database # WHERE Date IN ('2020-12-31', '2021-06-30')"},{"path":"https://ketchbrookanalytics.github.io/migrate/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Create Credit State Migration (Transition) Matrices","text":"First, load package using library() package built-mock dataset, can loaded environment like : Note important feature mock_credit dataset exactly two (2) unique values date column variable; time argument passed migrate() two (2) unique values, function throw error. summarize migration within data, use migrate() function create state transition matrix, use build_matrix() function , one shot, use |>","code":"library(migrate) data(\"mock_credit\")  head(mock_credit[order(mock_credit$customer_id), ])   # sort by 'customer_id' unique(mock_credit$date) #> [1] \"2020-06-30\" \"2020-09-30\" migrated_df <- migrate(   data = mock_credit,   id = customer_id,   time = date,   state = risk_rating, ) #> ℹ Migrating from 2020-06-30 to 2020-09-30 head(migrated_df) #> # A tibble: 6 × 3 #>   risk_rating_start risk_rating_end   prop #>   <ord>             <ord>            <dbl> #> 1 AAA               AAA             0.774  #> 2 AAA               AA              0.194  #> 3 AAA               A               0.0323 #> 4 AAA               BBB             0      #> 5 AAA               BB              0      #> 6 AAA               B               0 build_matrix(migrated_df) #> ℹ Using `risk_rating_start` as the 'state_start' column variable #> ℹ Using `risk_rating_end` as the 'state_end' column variable #> ℹ Using `prop` as the 'metric' column variable #>             AAA         AA          A        BBB         BB          B        CCC #> AAA 0.774193548 0.19354839 0.03225806 0.00000000 0.00000000 0.00000000 0.00000000 #> AA  0.101123596 0.66292135 0.15730337 0.07865169 0.00000000 0.00000000 0.00000000 #> A   0.008333333 0.06666667 0.72500000 0.16666667 0.03333333 0.00000000 0.00000000 #> BBB 0.000000000 0.00000000 0.11363636 0.68181818 0.14772727 0.05681818 0.00000000 #> BB  0.000000000 0.00000000 0.00000000 0.11392405 0.63291139 0.16455696 0.08860759 #> B   0.000000000 0.00000000 0.00000000 0.01388889 0.09722222 0.62500000 0.26388889 #> CCC 0.000000000 0.00000000 0.00000000 0.00000000 0.00000000 0.14285714 0.85714286 mock_credit |>   migrate(     id = customer_id,     time = date,     state = risk_rating,     metric = principal_balance,     percent = FALSE,     verbose = FALSE   ) |>   build_matrix(     state_start = risk_rating_start,     state_end = risk_rating_end,     metric = principal_balance   ) #>          AAA       AA        A      BBB       BB        B      CCC #> AAA 29042000  6575000    20000        0        0        0        0 #> AA   6445000 58095000 13045000 14467000        0        0        0 #> A     804000  7898000 85330000 21015000  5829000        0        0 #> BBB        0        0 12461000 65315000 13911000  8140000        0 #> BB         0        0        0 11374000 45986000 14057000  5723000 #> B          0        0        0   413000  6700000 47402000 17132000 #> CCC        0        0        0        0        0  2094000 14843000"},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/build_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a state migration (transition) matrix — build_matrix","title":"Build a state migration (transition) matrix — build_matrix","text":"build_matrix() creates state transition matrix summarized data (.e., data frame returned migrate()) representing unique combination beginning & ending states numeric metric.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/build_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a state migration (transition) matrix — build_matrix","text":"","code":"build_matrix(data, state_start = NULL, state_end = NULL, metric = NULL)"},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/build_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a state migration (transition) matrix — build_matrix","text":"data data frame data frame extension (e.g., tibble data.table) containing minimum three (3) column variables representing starting credit risk state, ending credit risk state, metric containing values representing movement (.e., \"transition) metric starting credit risk state point time ending credit risk state point time. style data frame output migrate() function within package. state_start (Optional) symbol string, representing column variable data data frame argument contains starting credit risk state values. left null, function attempt find . state_end (Optional) symbol string, representing column variable data data frame argument contains starting credit risk state values. left null, function attempt find . metric (Optional) symbol string, representing column variable data data frame argument contains metric grouped difference value starting credit risk state period ending credit risk state period computed.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/build_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a state migration (transition) matrix — build_matrix","text":"matrix object, first (row) dimension represents starting credit risk state, second (column) dimension represents ending credit risk state, values within matrix represent transitioned amount based upon values metric numeric column variable data data frame. Note: matrix object can coerced data frame using .data.frame().","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/build_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a state migration (transition) matrix — build_matrix","text":"","code":"# Let `build_matrix()` guess which column variables represent `state_start`, # `state_end` and `metric` mock_credit |>   migrate(     time = date,     state = risk_rating,     id = customer_id,     metric = principal_balance   ) |>   build_matrix() #> ℹ Migrating from 2020-06-30 to 2020-09-30 #> ℹ Using `risk_rating_start` as the 'state_start' column variable #> ℹ Using `risk_rating_end` as the 'state_end' column variable #> ℹ Using `principal_balance` as the 'metric' column variable #>             AAA         AA            A         BBB         BB          B #> AAA 0.814939529 0.18449926 0.0005612145 0.000000000 0.00000000 0.00000000 #> AA  0.070014774 0.63111068 0.1417133794 0.157161170 0.00000000 0.00000000 #> A   0.006651444 0.06533969 0.7059300440 0.173855852 0.04822297 0.00000000 #> BBB 0.000000000 0.00000000 0.1248259489 0.654281908 0.13935108 0.08154107 #> BB  0.000000000 0.00000000 0.0000000000 0.147446202 0.59613689 0.18222712 #> B   0.000000000 0.00000000 0.0000000000 0.005764373 0.09351403 0.66160481 #> CCC 0.000000000 0.00000000 0.0000000000 0.000000000 0.00000000 0.12363465 #>            CCC #> AAA 0.00000000 #> AA  0.00000000 #> A   0.00000000 #> BBB 0.00000000 #> BB  0.07418978 #> B   0.23911678 #> CCC 0.87636535  # Specify which column variables represent `state_start`, `state_end` and # `metric` mock_credit |>   migrate(     id = customer_id,     time = date,     state = risk_rating,     percent = FALSE   ) |>   build_matrix(     state_start = risk_rating_start,     state_end = risk_rating_end,     metric = count   ) #> ℹ Migrating from 2020-06-30 to 2020-09-30 #>     AAA AA  A BBB BB  B CCC #> AAA  24  6  1   0  0  0   0 #> AA    9 59 14   7  0  0   0 #> A     1  8 87  20  4  0   0 #> BBB   0  0 10  60 13  5   0 #> BB    0  0  0   9 50 13   7 #> B     0  0  0   1  7 45  19 #> CCC   0  0  0   0  0  3  18"},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/migrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the migration of a data frame — migrate","title":"Summarize the migration of a data frame — migrate","text":"migrate() summarizes transition amount (percentage) numeric variable beginning credit risk state category ending credit risk state, given data frame input.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/migrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the migration of a data frame — migrate","text":"","code":"migrate(   data,   id,   time,   state,   metric = NULL,   percent = TRUE,   fill_state = NULL,   verbose = TRUE )"},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/migrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the migration of a data frame — migrate","text":"data data frame data frame extension (e.g., tibble data.table) containing minimum three (3) column variables representing time, credit risk state, ID identifying credit facility (expect see unique values column variable appear twice dataset; first unique time value second unique time value, unless ID existed one two times). id column variable data data frame argument contains unique identifier track particular credit facility migrated /. left null, migrate() attempt use first column variable data frame provided data argument. time column variable data data frame representing timepoint (e.g., Date) observation; column contain two unique values (migration Time Time B) state column variable data data frame argument contains credit risk state values. metric (Optional) column variable type \"numeric\" data data frame argument contains continuous metric values weight state migration percent FALSE, calculate migration absolute basis (rather percentage basis, default) fill_state (Optional) value (e.g., character string \"Rating\" \"NR\") used filler state id values exist one timepoint data. verbose TRUE, function returns informational message transition period","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/migrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the migration of a data frame — migrate","text":"data frame containing three (3) column variables representing unique combinations starting & ending credit risk states calculated migration observed period.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/migrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the migration of a data frame — migrate","text":"","code":"# Return the percent migration of the number of credit facilities migrate(   data = mock_credit,   id = customer_id,   time = date,   state = risk_rating ) #> ℹ Migrating from 2020-06-30 to 2020-09-30 #> # A tibble: 49 × 3 #>    risk_rating_start risk_rating_end   prop #>    <ord>             <ord>            <dbl> #>  1 AAA               AAA             0.774  #>  2 AAA               AA              0.194  #>  3 AAA               A               0.0323 #>  4 AAA               BBB             0      #>  5 AAA               BB              0      #>  6 AAA               B               0      #>  7 AAA               CCC             0      #>  8 AA                AAA             0.101  #>  9 AA                AA              0.663  #> 10 AA                A               0.157  #> # ℹ 39 more rows  # Return the absolute migration in `principal_balance` migrate(   data = mock_credit,   id = customer_id,   time = date,   state = risk_rating,   metric = principal_balance,   percent = FALSE ) #> ℹ Migrating from 2020-06-30 to 2020-09-30 #> # A tibble: 49 × 3 #>    risk_rating_start risk_rating_end principal_balance #>    <ord>             <ord>                       <dbl> #>  1 AAA               AAA                      29042000 #>  2 AAA               AA                        6575000 #>  3 AAA               A                           20000 #>  4 AAA               BBB                             0 #>  5 AAA               BB                              0 #>  6 AAA               B                               0 #>  7 AAA               CCC                             0 #>  8 AA                AAA                       6445000 #>  9 AA                AA                       58095000 #> 10 AA                A                        13045000 #> # ℹ 39 more rows  # Provide a filler `state` value when a unique `id` is missing a timepoint migrate(   data = head(mock_credit, n = 995),   # drop the last 5 observations   id = customer_id,   time = date,   state = risk_rating,   fill_state = \"NR\",   percent = FALSE ) #> ℹ Migrating from 2020-06-30 to 2020-09-30 #> ℹ 5 IDs have a missing timepoint: #>   • Migrating 5 IDs with missing end timepoint to new class 'NR' #>   • Migrating 0 IDs with missing start timepoint from new class 'NR' #> # A tibble: 64 × 3 #>    risk_rating_start risk_rating_end count #>    <ord>             <ord>           <int> #>  1 AAA               AAA                24 #>  2 AAA               AA                  5 #>  3 AAA               A                   1 #>  4 AAA               BBB                 0 #>  5 AAA               BB                  0 #>  6 AAA               B                   0 #>  7 AAA               CCC                 0 #>  8 AAA               NR                  1 #>  9 AA                AAA                 9 #> 10 AA                AA                 59 #> # ℹ 54 more rows"},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/mock_credit.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock dataset containing credit statistics by customer at two time intervals. Some customers only exist in one time interval (they either became a customer after the first time interval, or discontinued being a customer before the second time interval). — mock_credit","title":"Mock dataset containing credit statistics by customer at two time intervals. Some customers only exist in one time interval (they either became a customer after the first time interval, or discontinued being a customer before the second time interval). — mock_credit","text":"Mock dataset containing credit statistics customer two time intervals. customers exist one time interval (either became customer first time interval, discontinued customer second time interval).","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/mock_credit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock dataset containing credit statistics by customer at two time intervals. Some customers only exist in one time interval (they either became a customer after the first time interval, or discontinued being a customer before the second time interval). — mock_credit","text":"","code":"mock_credit"},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/mock_credit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mock dataset containing credit statistics by customer at two time intervals. Some customers only exist in one time interval (they either became a customer after the first time interval, or discontinued being a customer before the second time interval). — mock_credit","text":"data frame columns: customer_id Customer ID 497 unique customers. date Date observation; two unique dates dataset. risk_rating Factor representing risk level 1-14 scale. principal_balance Principal balance outstanding loan.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/mock_credit.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mock dataset containing credit statistics by customer at two time intervals. Some customers only exist in one time interval (they either became a customer after the first time interval, or discontinued being a customer before the second time interval). — mock_credit","text":"Developed Ketchbrook Analytics","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/reference/mock_credit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mock dataset containing credit statistics by customer at two time intervals. Some customers only exist in one time interval (they either became a customer after the first time interval, or discontinued being a customer before the second time interval). — mock_credit","text":"","code":"if (FALSE) { # \\dontrun{  mock_credit } # }"},{"path":[]},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"enhancements-0-5-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"migrate 0.5.0","text":"new fill_state argument migrate() introduced, allowing users migrate IDs exist single timepoint new existing state Errors, warnings, messages (previously handled exclusively {rlang}) output console improved via use {cli}","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"migrate 0.5.0","text":"Resolves error thrown attempting coerce state argument type character type factor","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"technical-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Technical Changes","title":"migrate 0.5.0","text":"date argument migrate() fully deprecated (replaced time argument v0.4.0) {magrittr} pipe %>% replaced native pipe |> introduced R 4.1. Due , minimum R version required install {migrate} bumped R 4.1. Accordingly, {magrittr} removed Imports. {cli} {glue} added Imports","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"miscellaneous-0-5-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"migrate 0.5.0","text":"{pkgdown} site package created https://ketchbrookanalytics.github.io/migrate/ License bumped 2024, copyright holder changed Ketchbrook Analytics LLC GitHub repository transferred mthomas-ketchbrook ketchbrookanalytics","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"migrate-040","dir":"Changelog","previous_headings":"","what":"migrate 0.4.0","title":"migrate 0.4.0","text":"CRAN release: 2021-10-15 release mainly aims resolve deprecated quasiquotation dplyr::enquo (!! var) favor ({{ var }}) syntax. first release adequate testing coverage.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"migrate 0.4.0","text":"date argument migrate() replaced (renamed) favor time term date seemed specific use migrate() function, replaced general term, time. Instead holding users using Date-type column variables, change allows flexibility migrate Time –> Time B, example.","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"other-features--improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Other Features & Improvements","title":"migrate 0.4.0","text":"migrate() new verbose argument (logical TRUE/FALSE), informs user time horizon migration calculated: {r} migrate(   data = mock_credit,   id = customer_id,   time = date,   state = risk_rating ) # > === Migrating : `2020-06-30` --> `2020-09-30` === # > ... [output] ... {migrate} now light-weight: dependencies {crayon} & {stringr} removed","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"migrate-030","dir":"Changelog","previous_headings":"","what":"migrate 0.3.0","title":"migrate 0.3.0","text":"CRAN release: 2020-12-07 Deprecated rating argument migrate(), renamed state Added back id argument migrate() Revised mock_credit dataset migrate() defaults percentage migration, instead absolute","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"migrate-020","dir":"Changelog","previous_headings":"","what":"migrate 0.2.0","title":"migrate 0.2.0","text":"CRAN release: 2020-11-26 Patch fix migrate() Improvements docs","code":""},{"path":"https://ketchbrookanalytics.github.io/migrate/news/index.html","id":"migrate-010","dir":"Changelog","previous_headings":"","what":"migrate 0.1.0","title":"migrate 0.1.0","text":"CRAN release: 2020-11-24 Initial release","code":""}]
